<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Board_Segment</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ///Setup
    Protected=false;
    CanMove=false;//Used to detect if the king piece can move while in check
    image_speed=0;//Stops image from animating
    Piece_ID=-1;//The ID of the piece from the S_Piece_Data script. -1 = defaut
    CanMove=false;//This segment of the board will light up if a selected piece is able to move here.
    Colour="Black";//The colour of the piece. defaut = Black
    CanTake=false;//This segment of the board will light up if a selected piece is able to take a peice on this segment.
    Moves=0;//Amount of moves this piece has made since the match began.
    NotSafe=false;//At the start of each turn every piece will be checked to see if its safe or not. This allows us to check to see if a player is in check for instance.
    NotSafeAggressor=noone;//The Segment that is thretening this Segment if any.

    Castling=false;//Set to true if an empty segment can be used to castle.
    CastlingID=-1;//ID of the castling segment on the board. (Used to calculate what side of the board the castling move is happening)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ///Light up segments
    if global.Selected=ID {image_index=1}else{image_index=0};//Lights up selected segment.
    if  CanMove=true{image_index=2};//Lights up a segment when selected piece can move to segment.
    if  CanTake=true{image_index=3};//Lights up a segment when selected piece can take a piece on the segment.
    //Debug
    if global.Debug_Mode=true{
        if  NotSafe=true{image_index=4};//Debug option, will show any segments that are not safe to move to for the curent player.

        if  Protected=true{image_index=5};//Debug option, will show any segments that are not safe to move to for the curent player.
    };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ///Moving and taking pieces

    if o_Controller.Win_Text=""{//Make sure the game isnt in a won state
        
        with o_Segment{if global.Selected=ID and global.Turn!=Colour{exit}};//Make sure we are not selecting a piece belonging to the wrong player.
        
        //Check to see if this piece can move.
        if CanMove=true{
            
            //Moving
            with o_Segment{if global.Selected=ID{
                    other.Piece_ID=Piece_ID other.Colour=Colour other.Moves=Moves+1  Piece_ID=-1 if other.Piece_ID=5{S_Castling()} with o_Segment{CanMove=false CanTake=false} End_Turn();
                }}};

        //Check to see if this piece can move to take another piece.
        if CanTake=true{
            
            //Taking
            with o_Segment{if global.Selected=ID{
                    other.Piece_ID=Piece_ID other.Colour=Colour other.Moves=Moves+1  Piece_ID=-1 with o_Segment{CanMove=false CanTake=false}  End_Turn();
                }}}};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ///Display movable segments to the player.
    global.Selected=ID with o_Segment{CanMove=false CanTake=false};
    if Piece_ID!=-1{ //Check to see segment is not empty.

        if global.Piece_Data[Piece_ID,0]=0{S_Pawn_Data(0)};//Pawn
        if global.Piece_Data[Piece_ID,0]=1{S_Rook_Data(0)};//Rook
        if global.Piece_Data[Piece_ID,0]=2{S_Knight_Data(0)};//Knight
        if global.Piece_Data[Piece_ID,0]=3{S_Bishop_Data(0)};//Bishop
        if global.Piece_Data[Piece_ID,0]=4{S_Queen_Data(0)};//Queen
        if global.Piece_Data[Piece_ID,0]=5{S_King_Data(0)};//King
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ///Show Debug Data to player if debug mode is on.
    if global.Debug_Mode=true{//Check to see Debug mode is on
        if Piece_ID&gt;=0 and global.Selected=ID {//check to see piece is not empty
            var X=0;//x co-ord of where information is drawn
            if x&lt;room_width/2{X=room_width-450};//Check to see where selected piece is on the board.
            draw_set_alpha(0.5);//Set alpha of information shown.
            draw_sprite(Spr_Info,0,X,0);//Display background of data.
            draw_set_font(Fnt_Main);//Set Font.
            draw_text_colour(X,5,global.Piece_Data[Piece_ID,1],c_black,c_black,c_white,c_white,1);//Draw debug information.
            draw_text_colour(X,35,"Moves so far: "+string(Moves),c_black,c_black,c_white,c_white,1);//Draw debug information.
            draw_set_alpha(1);//Reset alpha
        }};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ///Drawing Setup
    depth=-y;//Set Depth on the board.
    draw_self();//Draw empty segment
    //L is the image number of the sprite to use.
    var L=0;//setup temp variable
    if Colour="Black" L=0 else{L=1};

    if Piece_ID&gt;=0{draw_sprite(global.Piece_Data[Piece_ID,2],L,x,y);//Draw chess piece
    };

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
