<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init board pieces and vars

    global.Check=""; //Colour that is in check.
    global.Selected=-1; //This variable represents what piece on the board is currently selected by the player.
    global.Turn="White";//Sets the colour that starts first.
    
    
     WhiteKing=0;
     BlackKing=0;
     White=0;
     Black=0;
     //Setup variables for step event.
     
    Win_Text="";
    
    //If the winning text is anything other than "", it will be shown to the player.
    var P=0;
    var X=x;
    var Y=y;
    
    //1. - create switch V
    //2. - set to switch piceses V
    //3. - change the while loop to a for loop V
    //4. - optimize the script V
        
    for (P=0; P&lt;=63; P++)
    {
        BoardPiece = instance_create(X,Y,o_Segment);  //Create a board cell
        BoardPiece.ID = P;
        switch (BoardPiece.ID)
        {
            case 0:  BoardPiece.Piece_ID=1;
                  BoardPiece.Colour="Black";
                  break;                       //Create black Rooks
            case 1:  BoardPiece.Piece_ID=2;
                  BoardPiece.Colour="Black";
                  break;                        //Create black knight
            case 2:  BoardPiece.Piece_ID=3;
                  BoardPiece.Colour="Black";    //Create black bishop
                  break; 
            case 3:  BoardPiece.Piece_ID=4;
                  BoardPiece.Colour="Black";    //Crate black queen
                  break;  
            case 4:  BoardPiece.Piece_ID=5;
                  BoardPiece.Colour="Black";    //Crate black king
                  break; 
         case 5:  BoardPiece.Piece_ID=3;
                  BoardPiece.Colour="Black";    //Create black bishop
                  break;
         case 6:  BoardPiece.Piece_ID=2;
                  BoardPiece.Colour="Black";    //Create black knight
                  break;   
         case 7:  BoardPiece.Piece_ID=1;
                  BoardPiece.Colour="Black";
                  break;                        //Create black Rooks
         case 8:  BoardPiece.Piece_ID=0;        //Create pawns
         case 9:  BoardPiece.Piece_ID=0;        //from there
         case 10: BoardPiece.Piece_ID=0;
         case 11: BoardPiece.Piece_ID=0;
         case 12: BoardPiece.Piece_ID=0;
         case 13: BoardPiece.Piece_ID=0;
         case 14: BoardPiece.Piece_ID=0;       //to there
         case 15: BoardPiece.Piece_ID=0; break;
         case 48: BoardPiece.Piece_ID=0;
                    BoardPiece.Colour="White";        //Create pawns
         case 49:   BoardPiece.Piece_ID=0;
                    BoardPiece.Colour="White";        //from there
         case 50:   BoardPiece.Piece_ID=0;
                    BoardPiece.Colour="White";
         case 51:   BoardPiece.Piece_ID=0;
                    BoardPiece.Colour="White";
         case 52:   BoardPiece.Piece_ID=0;
                    BoardPiece.Colour="White";
         case 53:   BoardPiece.Piece_ID=0;
                    BoardPiece.Colour="White";
         case 54:   BoardPiece.Piece_ID=0;
                    BoardPiece.Colour="White";       //to there
         case 55:   BoardPiece.Piece_ID=0;
                    BoardPiece.Colour="White"; 
                    break;
         case 56:   BoardPiece.Piece_ID=1;
                    BoardPiece.Colour="White";  //Create white rook
                    break;
         case 57:   BoardPiece.Piece_ID=2;
                    BoardPiece.Colour="White";
                    break;                        //Create white knight
         case 58:   BoardPiece.Piece_ID=3;
                    BoardPiece.Colour="White";    //Create white bishop
                    break;
         case 59:   BoardPiece.Piece_ID=4;
                    BoardPiece.Colour="White";    //Crate white queen
                    break;  
         case 60:   BoardPiece.Piece_ID=5;
                    BoardPiece.Colour="White";    //Crate white king
                    break; 
         case 61:   BoardPiece.Piece_ID=3;
                    BoardPiece.Colour="White";    //Create white bishop
                    break;
         case 62:   BoardPiece.Piece_ID=2;
                    BoardPiece.Colour="White";    //Create white knight
                    break;   
         case 63:   BoardPiece.Piece_ID=1;
                    BoardPiece.Colour="White";
                    break;                        //Create white Rooks 
        }
        //Adding a horizontal cell position
        X+=129;
        //reset row X position      
        if X &gt;=1110
        {
            X=x; //Right here
            Y+=129;  //Adding a vertical cell position
        };
    };
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Win Conditions

WhiteKing=0;
BlackKing=0;
White=0; 
Black=0;
//Setup variables.
    

//Loop for checking all the pieces
with (o_Segment)
{
    ///Counting for a white pieces at the board
    if (Colour="White" and Piece_ID!=-1) 
    {
        other.White+=1;
    } 
    //Counting for a black pieces at the board
    if (Colour="Black" and Piece_ID!=-1)
    {
        other.Black+=1;
    }
};

//Loop for checking all the kings
    //Check to see if players have their king.
with (o_Segment)
{
    if (Colour="White" and Piece_ID=5)
    {
        other.WhiteKing+=1;
    } 
    if (Colour="Black" and Piece_ID=5) 
    {
        other.BlackKing+=1;
    }
};


    //Set winner if players dont have any pieces    
if White=0  //no white pieces at the board
{
    Win_Text="Blacks Win!"
}
    
if Black=0  //no black pieces at the board
{
    Win_Text="Whites Win!"
};



//Check for an existing King for a both teams

if WhiteKing=0      //If white king dont exists
{
    Win_Text="Blacks Win!" //blacks win
}

if BlackKing=0  //for the black are equals
{
    Win_Text="Whites Win!" //whites win
};



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ///Reset Game
    
    if Win_Text!=""
    {
        room_restart()
    };
    
    //Restart Game after displaying winning text.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    ///Draw text
    draw_set_font(Fnt_Main);//Set Main Font
    draw_set_halign(fa_center);//Set text alignment to centre
    
    //Check to see if player who's turn it is, is in check and if so alert that player.
//    if global.Check=global.Turn{
    //    draw_text_colour(room_width/2,5,"Turn: "+global.Turn+", Your in check! you must move your king or move a piece to protect it!",c_white,c_white,c_white,c_white,1)};
    //{draw_text_colour(room_width/2,5,"Turn: "+global.Turn,c_white,c_white,c_white,c_white,1)}

    draw_text(600, 5, "Turn: "+global.Turn);
    
    //Draw winning text when a player wins the game.

    //Displaying winning by taking king.
    if Win_Text="Whites Win!"{draw_sprite(Spr_Info,0,room_width/2-134,room_height/2) draw_text_colour(room_width/2,room_height/2,string(Win_Text)+"# Click/Tap# to restart!",c_white,c_white,c_white,c_white,1)};
    if Win_Text="Blacks Win!"{draw_sprite(Spr_Info,0,room_width/2-134,room_height/2) draw_text_colour(room_width/2,room_height/2,string(Win_Text)+"# Click/Tap# to restart!",c_black,c_black,c_black,c_black,1)};

    //Displaying winning by check.
    if Win_Text="Check! Whites Win!"{draw_sprite(Spr_Info,0,room_width/2-134,room_height/2) draw_text_colour(room_width/2,room_height/2,string(Win_Text)+"# Click/Tap# to restart!",c_white,c_white,c_white,c_white,1)};
    if Win_Text="Check! Blacks Win!"{draw_sprite(Spr_Info,0,room_width/2-134,room_height/2) draw_text_colour(room_width/2,room_height/2,string(Win_Text)+"# Click/Tap# to restart!",c_black,c_black,c_black,c_black,1)};
    //Reset
    draw_set_halign(fa_left);//Set text alignment to left

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
